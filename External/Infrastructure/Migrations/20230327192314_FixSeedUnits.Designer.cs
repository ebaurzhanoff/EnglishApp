// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230327192314_FixSeedUnits")]
    partial class FixSeedUnits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("application")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.CourseBoundaryModel.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Grammar",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Vocabulary",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Listening",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Speaking",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Groups", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            Name = "Present simple",
                            SortOrder = 1,
                            Token = "Grammar_PresentSimple"
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            Name = "Present continuous",
                            SortOrder = 2,
                            Token = "Grammar_PresentContinuous"
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 1L,
                            Name = "Present simple or present continuous",
                            SortOrder = 3,
                            Token = "Grammar_PresentSimpleOrPresentContinuous"
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 1L,
                            Name = "Past simple",
                            SortOrder = 4,
                            Token = "Grammar_PastSimple"
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 1L,
                            Name = "Present perfect",
                            SortOrder = 5,
                            Token = "Grammar_PresentPerfect"
                        },
                        new
                        {
                            Id = 6L,
                            CourseId = 1L,
                            Name = "Past simple or Present perfect",
                            SortOrder = 6,
                            Token = "Grammar_PastSimpleOrPresentPerfect"
                        },
                        new
                        {
                            Id = 7L,
                            CourseId = 1L,
                            Name = "Past continuous",
                            SortOrder = 7,
                            Token = "Grammar_PastContinuous"
                        },
                        new
                        {
                            Id = 8L,
                            CourseId = 1L,
                            Name = "Future simple",
                            SortOrder = 8,
                            Token = "Grammar_FutureSimple"
                        },
                        new
                        {
                            Id = 9L,
                            CourseId = 1L,
                            Name = "Future forms",
                            SortOrder = 9,
                            Token = "Grammar_FutureForms"
                        },
                        new
                        {
                            Id = 10L,
                            CourseId = 1L,
                            Name = "Modal verbs",
                            SortOrder = 10,
                            Token = "Grammar_ModalVerbs"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("GroupToken", "SortOrder");

                    b.ToTable("Lessons", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Present Simple Lesson - A1",
                            GroupToken = "Grammar_PresentSimple",
                            LevelId = 1L,
                            SortOrder = 1,
                            Title = "Lesson"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Present Continuous Lesson - A1",
                            GroupToken = "Grammar_PresentContinuous",
                            LevelId = 1L,
                            SortOrder = 2,
                            Title = "Lesson"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Levels", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "A1",
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "A2",
                            Name = "Elementary"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "B1",
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "B2",
                            Name = "Upper Intermediate"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "C1",
                            Name = "Advanced"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "C2",
                            Name = "Proficient"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Units", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LessonId = 1L,
                            SortOrder = 1,
                            Title = "Present simple “to be”"
                        },
                        new
                        {
                            Id = 2L,
                            LessonId = 1L,
                            SortOrder = 2,
                            Title = "Present simple “do/does”"
                        },
                        new
                        {
                            Id = 3L,
                            LessonId = 2L,
                            SortOrder = 1,
                            Title = "Present Continuous. Rules"
                        },
                        new
                        {
                            Id = 4L,
                            LessonId = 2L,
                            SortOrder = 2,
                            Title = "Present Continuous. How to Use It"
                        });
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Group", b =>
                {
                    b.HasOne("Domain.CourseBoundaryModel.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.HasOne("Domain.LessonBoundaryModel.Level", "Level")
                        .WithMany("Lessons")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Unit", b =>
                {
                    b.HasOne("Domain.LessonBoundaryModel.Lesson", "Lesson")
                        .WithMany("Units")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.LessonBoundaryModel.Source", "Sources", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("character varying(4096)");

                            b1.Property<int>("SortOrder")
                                .HasColumnType("integer");

                            b1.Property<long>("UnitId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("UnitId");

                            b1.ToTable("Sources", "application");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("153e2ddb-8d95-4938-9cdf-d337eaa93687"),
                                    Content = "Как переводится to be и когда используется?\r\n\r\n    'Be' мы используем в 3 случаях, когда мы хотим сказать:\r\n        Кто/что кем/чем является (она медсестра);\r\n        Кто/что каким является (мой кот серый);\r\n        Кто/что где находится (папа на работе).\r\n\r\n    То есть если мы хотим описать местоположение чего-либо, состояние чего-либо или то, чем является этот предмет/человек, то мы используем глагол to be.",
                                    SortOrder = 1,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("f956e0e4-7a17-442a-a974-2c4c0b9d59fd"),
                                    Content = "Важно знать, как глагол to be меняется в зависимости от того, кто производит действие. Это можете быть вы, ваш друг или группа людей. В настоящем времени этот глагол имеет три формы: am, is, are. ",
                                    SortOrder = 2,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("3ee897d0-bd10-4f8c-b821-8d44ec40587f"),
                                    Content = "Давайте рассмотрим примеры употребления. ",
                                    SortOrder = 3,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("2b3fca8d-0cc6-48b0-9dc5-84192861b4cf"),
                                    Content = " Единственное число\r\n    I am a doctor. Я являюсь доктором.\r\n    He is clever. Он является умным.\r\n    She is at home. Она находится дома.\r\n    It is an interesting book. Это есть интересная книга.\r\n    You are a smart guy. Ты являешься сообразительным парнем.",
                                    SortOrder = 4,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("e0fc5e78-7050-440a-9343-c70d490ac622"),
                                    Content = " Множественное число \r\n    We are good singers. Мы являемся хорошими певцами. \r\n    You are wonderful listeners. Вы являетесь отличными слушателями. \r\n    They are in the room. Они находятся в комнате.",
                                    SortOrder = 5,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("83f2a27d-91b9-44d2-99b6-c22edadea90a"),
                                    Content = "Present simple - это простое настоящее время, оно употребляется когда говорим о действиях которые мы делаем регулярно, каждый или часто. Одним словом это действия который не заканчивается.",
                                    SortOrder = 1,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("481018ea-064b-49d6-92dd-d96139ed2f35"),
                                    Content = "I go to work/university every day \r\n\r\nТакже оно употребляется, когда мы говорим про факты в настоящем.\r\n\r\nI like pizza/sushi",
                                    SortOrder = 2,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("5c0e23e9-1c85-4b66-b117-ea608d3067a2"),
                                    Content = "Конструкция предложений в present simple \r\n\r\n    Subject + Verb\r\n    You like ice cream\r\n\r\n    He / She / It + Verb(s)\r\n    He likes ice cream",
                                    SortOrder = 3,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("c41847e1-c6f6-4eb9-aff8-c438ea57b37d"),
                                    Content = "В отрицательных предложениях\r\n\r\n    do + not - don’t\r\n    does + not - doesn’t\r\n\r\n    Subject + don’t/doesn’t + Verb\r\n\r\n    I don’t like ice cream \r\n    She doesn’t go to school",
                                    SortOrder = 4,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("955c5a11-1082-46cd-8491-091cf5b47720"),
                                    Content = "Чтобы сделать вопросительное предложение \r\n\r\n    Do/ Does + Subject + Verb \r\n\r\n    Do you go to university?\r\n    Yes, I do \r\n    No, I don’t \r\n\r\n    Does he go swimming? \r\n    Yes, he does\r\n    No, he doesn’t",
                                    SortOrder = 5,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("a86656ea-ebe4-4140-9ab8-83a12bd4d721"),
                                    Content = "Present continuous - настоящее длительное время, оно употребляется когда говорим о действиях которые происходит сейчас, на данный момент времени.",
                                    SortOrder = 1,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("279cd357-6d09-4f67-b603-809b74d4575d"),
                                    Content = "Здесь могут стоять ключевые слова такие как: now/ right now/ at the momen",
                                    SortOrder = 2,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("c8c6b55a-e9c9-4fcd-b382-bc8300b082b7"),
                                    Content = "Конструкция предложения\r\n\r\n	1.	Формула: I am + глагол-ing.\r\n		Пример: I am singing - Я пою.\r\n\r\n	2.	Формула: He/She/It is + глагол-ing.\r\n		Примеры: \r\n			He is smiling — Он улыбается.\r\n			She is dancing — Она танцует.\r\n			It is shining — Оно светит.\r\n\r\n	3.	Формула: We/You/They are + глагол-ing.\r\n		Примеры: \r\n			We are listening — Мы слушаем.\r\n			You are reading — Вы читаете.\r\n			They are swimming — Они плавают.\r\n\r\n	1.	Глагол заканчивается на —е \r\n		Правило: последняя буква отбрасывается \r\n		Пример: make — making (делать)\r\n\r\n	2.	Глагол оканчивается на —ie\r\n		Правило: -ie заменяется на -y\r\n		Пример: lie — lying (лежать)\r\n\r\n	3.	Односложный глагол, оканчивающийся на гласную с согласной\r\n		Правило: последняя согласная удваивается\r\n		Пример: get — getting (получать)",
                                    SortOrder = 3,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("9ca4ee78-e109-4f24-b0fa-1bb1648ccaf5"),
                                    Content = "Отрицательные предложения\r\n\r\n	1.	Формула: I am not + глагол-ing.\r\n		Пример: I am not singing - Я не пою.\r\n\r\n	2.	Формула: He/She/It is not + глагол-ing\r\n		Примеры:\r\n			He is not smiling - Он не улыбается. \r\n			She is not dancing - Она не танцует.\r\n			It is not shining - Оно не светит.\r\n\r\n	3.	Формула: We/You/They are not + глагол-ing.\r\n		Примеры: \r\n			We are not listening - Мы не слушаем.\r\n			You are not reading - Вы не читаете.\r\n			They are not swimming - Они не плавают.",
                                    SortOrder = 4,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("074ace9a-faea-466f-b644-9a83464b9ec8"),
                                    Content = "Present continuous - также мы можем использовать когда описываем, \r\nкакое то действие или же фото, так как описание происходит сейчас, \r\nмы должны соответсвенно использовать время «present continuous»",
                                    SortOrder = 1,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("002eeff7-bbb6-4ef1-91de-e1c1c6e85f22"),
                                    Content = "Например: \r\n	She is wearing a black dress.\r\n	She is smiling in the picture",
                                    SortOrder = 2,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("d5c1ea8b-4106-4763-8830-1f5feb588d6e"),
                                    Content = "Таким образом мы описали ее внешность, и ее действия",
                                    SortOrder = 3,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("5590b101-32be-485d-8bc9-a1d654c79eda"),
                                    Content = "Следующий случай употребление времени «present continuous» - это когда говорим о запланированных и обязательно происходящих событий в ближайшем будущем",
                                    SortOrder = 4,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("a97fd515-e311-43af-ace1-7f7d489e6c83"),
                                    Content = "Слова-маркеры: \r\n\r\n	This/next week (на этой/следующей неделе)\r\n	Tonight (вечером)\r\n	Today (сегодня)\r\n	Tomorrow (завтра)\r\n	This/next year (в этом/следующем году)\r\n	This/next weekend (в эти/следующие выходные).",
                                    SortOrder = 5,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("62f951d5-4e69-4f59-894a-f4a32409c8e5"),
                                    Content = "Например: \r\n	I am meeting with Daniel tomorrow. \r\n	Здесь в этом предложении соответсвенно показано, что встреча запланирована!",
                                    SortOrder = 6,
                                    UnitId = 4L
                                });
                        });

                    b.OwnsOne("Domain.LessonBoundaryModel.UnitTask", "Task", b1 =>
                        {
                            b1.Property<long>("UnitId")
                                .HasColumnType("bigint");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Text")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UnitId");

                            b1.ToTable("Tasks", "application");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");
                        });

                    b.Navigation("Lesson");

                    b.Navigation("Sources");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Level", b =>
                {
                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
