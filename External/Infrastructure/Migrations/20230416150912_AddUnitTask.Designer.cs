// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230416150912_AddUnitTask")]
    partial class AddUnitTask
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("application")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.CourseBoundaryModel.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Grammar",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Vocabulary",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Listening",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Speaking",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Groups", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            Name = "Present simple",
                            SortOrder = 1,
                            Token = "Grammar_PresentSimple"
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            Name = "Present continuous",
                            SortOrder = 2,
                            Token = "Grammar_PresentContinuous"
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 1L,
                            Name = "Present simple or present continuous",
                            SortOrder = 3,
                            Token = "Grammar_PresentSimpleOrPresentContinuous"
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 1L,
                            Name = "Past simple",
                            SortOrder = 4,
                            Token = "Grammar_PastSimple"
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 1L,
                            Name = "Present perfect",
                            SortOrder = 5,
                            Token = "Grammar_PresentPerfect"
                        },
                        new
                        {
                            Id = 6L,
                            CourseId = 1L,
                            Name = "Past simple or Present perfect",
                            SortOrder = 6,
                            Token = "Grammar_PastSimpleOrPresentPerfect"
                        },
                        new
                        {
                            Id = 7L,
                            CourseId = 1L,
                            Name = "Past continuous",
                            SortOrder = 7,
                            Token = "Grammar_PastContinuous"
                        },
                        new
                        {
                            Id = 8L,
                            CourseId = 1L,
                            Name = "Future simple",
                            SortOrder = 8,
                            Token = "Grammar_FutureSimple"
                        },
                        new
                        {
                            Id = 9L,
                            CourseId = 1L,
                            Name = "Future forms",
                            SortOrder = 9,
                            Token = "Grammar_FutureForms"
                        },
                        new
                        {
                            Id = 10L,
                            CourseId = 1L,
                            Name = "Modal verbs",
                            SortOrder = 10,
                            Token = "Grammar_ModalVerbs"
                        },
                        new
                        {
                            Id = 11L,
                            CourseId = 3L,
                            Name = "Family",
                            SortOrder = 1,
                            Token = "Listening_Family"
                        },
                        new
                        {
                            Id = 12L,
                            CourseId = 4L,
                            Name = "Family",
                            SortOrder = 1,
                            Token = "Speaking_Family"
                        },
                        new
                        {
                            Id = 13L,
                            CourseId = 2L,
                            Name = "Family",
                            SortOrder = 1,
                            Token = "Vocabulary_Family"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("GroupToken", "SortOrder");

                    b.ToTable("Lessons", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Present Simple Lesson - A1",
                            GroupToken = "Grammar_PresentSimple",
                            LevelId = 1L,
                            SortOrder = 1,
                            Title = "Lesson"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Present Continuous Lesson - A1",
                            GroupToken = "Grammar_PresentContinuous",
                            LevelId = 1L,
                            SortOrder = 2,
                            Title = "Lesson"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Family Lesson - A1",
                            GroupToken = "Listening_Family",
                            LevelId = 1L,
                            SortOrder = 1,
                            Title = "Lesson"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Family Lesson - A1",
                            GroupToken = "Speaking_Family",
                            LevelId = 1L,
                            SortOrder = 1,
                            Title = "Lesson"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Family Lesson - A1",
                            GroupToken = "Vocabulary_Family",
                            LevelId = 1L,
                            SortOrder = 1,
                            Title = "Lesson"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Level", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Levels", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "A1",
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "A2",
                            Name = "Elementary"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "B1",
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 4L,
                            Code = "B2",
                            Name = "Upper Intermediate"
                        },
                        new
                        {
                            Id = 5L,
                            Code = "C1",
                            Name = "Advanced"
                        },
                        new
                        {
                            Id = 6L,
                            Code = "C2",
                            Name = "Proficient"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Units", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LessonId = 1L,
                            SortOrder = 1,
                            Title = "Present simple “to be”"
                        },
                        new
                        {
                            Id = 2L,
                            LessonId = 1L,
                            SortOrder = 2,
                            Title = "Present simple “do/does”"
                        },
                        new
                        {
                            Id = 3L,
                            LessonId = 2L,
                            SortOrder = 1,
                            Title = "Present Continuous. Rules"
                        },
                        new
                        {
                            Id = 4L,
                            LessonId = 2L,
                            SortOrder = 2,
                            Title = "Present Continuous. How to Use It"
                        },
                        new
                        {
                            Id = 5L,
                            LessonId = 3L,
                            SortOrder = 1,
                            Title = "Family"
                        },
                        new
                        {
                            Id = 6L,
                            LessonId = 4L,
                            SortOrder = 1,
                            Title = "Family"
                        },
                        new
                        {
                            Id = 7L,
                            LessonId = 5L,
                            SortOrder = 1,
                            Title = "Family"
                        });
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.UnitTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("UnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Tasks", "application");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            SortOrder = 1,
                            Title = "Complete the sentences with (am/ is/ are)",
                            UnitId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            SortOrder = 2,
                            Title = "Rewrite the sentences to negatives",
                            UnitId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            SortOrder = 3,
                            Title = "Make questions from these sentences",
                            UnitId = 1L
                        });
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Group", b =>
                {
                    b.HasOne("Domain.CourseBoundaryModel.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.HasOne("Domain.LessonBoundaryModel.Level", "Level")
                        .WithMany("Lessons")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Unit", b =>
                {
                    b.HasOne("Domain.LessonBoundaryModel.Lesson", "Lesson")
                        .WithMany("Units")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.LessonBoundaryModel.Source", "Sources", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("character varying(4096)");

                            b1.Property<int>("SortOrder")
                                .HasColumnType("integer");

                            b1.Property<int>("Type")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0);

                            b1.Property<long>("UnitId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("UnitId");

                            b1.ToTable("Sources", "application");

                            b1.WithOwner()
                                .HasForeignKey("UnitId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("b87f1c47-5fa3-434b-bc05-e37665e08fcd"),
                                    Content = "Как переводится to be и когда используется?\r\n\r\n    'Be' мы используем в 3 случаях, когда мы хотим сказать:\r\n        Кто/что кем/чем является (она медсестра);\r\n        Кто/что каким является (мой кот серый);\r\n        Кто/что где находится (папа на работе).\r\n\r\n    То есть если мы хотим описать местоположение чего-либо, состояние чего-либо или то, чем является этот предмет/человек, то мы используем глагол to be.",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("e661631f-71f3-4fbe-87b7-2cd824395c65"),
                                    Content = "Важно знать, как глагол to be меняется в зависимости от того, кто производит действие. Это можете быть вы, ваш друг или группа людей. В настоящем времени этот глагол имеет три формы: am, is, are. ",
                                    SortOrder = 2,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("c520930e-a413-4a2f-87d8-39339a3ffb45"),
                                    Content = "Давайте рассмотрим примеры употребления. ",
                                    SortOrder = 3,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("2e4647ae-6101-490f-8cd1-e8e49b830907"),
                                    Content = " Единственное число\r\n    I am a doctor. Я являюсь доктором.\r\n    He is clever. Он является умным.\r\n    She is at home. Она находится дома.\r\n    It is an interesting book. Это есть интересная книга.\r\n    You are a smart guy. Ты являешься сообразительным парнем.",
                                    SortOrder = 4,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("3fec39d3-5209-4ffd-a935-5d617a4621b0"),
                                    Content = " Множественное число \r\n    We are good singers. Мы являемся хорошими певцами. \r\n    You are wonderful listeners. Вы являетесь отличными слушателями. \r\n    They are in the room. Они находятся в комнате.",
                                    SortOrder = 5,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("9324d995-ffb2-4cab-8b4e-1a987d56303e"),
                                    Content = "Так же посмотрите это видео!",
                                    SortOrder = 6,
                                    Type = 0,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("66fb2e24-ce94-441f-80a9-7fc5515acc86"),
                                    Content = "YlqRjy_Z3GQ",
                                    SortOrder = 7,
                                    Type = 1,
                                    UnitId = 1L
                                },
                                new
                                {
                                    Id = new Guid("659e8555-bc91-495e-95e8-6e3473f6657f"),
                                    Content = "Present simple - это простое настоящее время, оно употребляется когда говорим о действиях которые мы делаем регулярно, каждый или часто. Одним словом это действия который не заканчивается.",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("5908ba4d-8971-4b33-826e-23e4ab41b6ca"),
                                    Content = "I go to work/university every day \r\n\r\nТакже оно употребляется, когда мы говорим про факты в настоящем.\r\n\r\nI like pizza/sushi",
                                    SortOrder = 2,
                                    Type = 0,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("05db3ef8-3ef0-425b-814b-e12ba941af9d"),
                                    Content = "Конструкция предложений в present simple \r\n\r\n    Subject + Verb\r\n    You like ice cream\r\n\r\n    He / She / It + Verb(s)\r\n    He likes ice cream",
                                    SortOrder = 3,
                                    Type = 0,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("fcb87c5e-568e-45d8-bfc1-a7371eaf8730"),
                                    Content = "В отрицательных предложениях\r\n\r\n    do + not - don’t\r\n    does + not - doesn’t\r\n\r\n    Subject + don’t/doesn’t + Verb\r\n\r\n    I don’t like ice cream \r\n    She doesn’t go to school",
                                    SortOrder = 4,
                                    Type = 0,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("8098e799-1d4f-444e-8a6d-a3be6cbca208"),
                                    Content = "Чтобы сделать вопросительное предложение \r\n\r\n    Do/ Does + Subject + Verb \r\n\r\n    Do you go to university?\r\n    Yes, I do \r\n    No, I don’t \r\n\r\n    Does he go swimming? \r\n    Yes, he does\r\n    No, he doesn’t",
                                    SortOrder = 5,
                                    Type = 0,
                                    UnitId = 2L
                                },
                                new
                                {
                                    Id = new Guid("c0607a9b-4840-460d-9259-96f76de69d3f"),
                                    Content = "Present continuous - настоящее длительное время, оно употребляется когда говорим о действиях которые происходит сейчас, на данный момент времени.",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("04b56578-b6d6-4a64-a16e-45b316edae90"),
                                    Content = "Здесь могут стоять ключевые слова такие как: now/ right now/ at the momen",
                                    SortOrder = 2,
                                    Type = 0,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("956769d4-bfda-445f-a34b-f2354c9232c1"),
                                    Content = "Конструкция предложения\r\n\r\n	1.	Формула: I am + глагол-ing.\r\n		Пример: I am singing - Я пою.\r\n\r\n	2.	Формула: He/She/It is + глагол-ing.\r\n		Примеры: \r\n			He is smiling — Он улыбается.\r\n			She is dancing — Она танцует.\r\n			It is shining — Оно светит.\r\n\r\n	3.	Формула: We/You/They are + глагол-ing.\r\n		Примеры: \r\n			We are listening — Мы слушаем.\r\n			You are reading — Вы читаете.\r\n			They are swimming — Они плавают.\r\n\r\n	1.	Глагол заканчивается на —е \r\n		Правило: последняя буква отбрасывается \r\n		Пример: make — making (делать)\r\n\r\n	2.	Глагол оканчивается на —ie\r\n		Правило: -ie заменяется на -y\r\n		Пример: lie — lying (лежать)\r\n\r\n	3.	Односложный глагол, оканчивающийся на гласную с согласной\r\n		Правило: последняя согласная удваивается\r\n		Пример: get — getting (получать)",
                                    SortOrder = 3,
                                    Type = 0,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("eee4388d-57e5-4704-9aaa-a40a1cd47caa"),
                                    Content = "Отрицательные предложения\r\n\r\n	1.	Формула: I am not + глагол-ing.\r\n		Пример: I am not singing - Я не пою.\r\n\r\n	2.	Формула: He/She/It is not + глагол-ing\r\n		Примеры:\r\n			He is not smiling - Он не улыбается. \r\n			She is not dancing - Она не танцует.\r\n			It is not shining - Оно не светит.\r\n\r\n	3.	Формула: We/You/They are not + глагол-ing.\r\n		Примеры: \r\n			We are not listening - Мы не слушаем.\r\n			You are not reading - Вы не читаете.\r\n			They are not swimming - Они не плавают.",
                                    SortOrder = 4,
                                    Type = 0,
                                    UnitId = 3L
                                },
                                new
                                {
                                    Id = new Guid("3a6b4ed8-3709-48ef-b694-c2faee88902a"),
                                    Content = "Present continuous - также мы можем использовать когда описываем, \r\nкакое то действие или же фото, так как описание происходит сейчас, \r\nмы должны соответсвенно использовать время «present continuous»",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("3c042ca2-f150-488d-a9af-c1738009dcb5"),
                                    Content = "Например: \r\n	She is wearing a black dress.\r\n	She is smiling in the picture",
                                    SortOrder = 2,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("69f1408b-191e-4654-a036-08718f9ae31f"),
                                    Content = "Таким образом мы описали ее внешность, и ее действия",
                                    SortOrder = 3,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("9fc028bb-7c88-4729-914b-da448bf9a2a4"),
                                    Content = "Следующий случай употребление времени «present continuous» - это когда говорим о запланированных и обязательно происходящих событий в ближайшем будущем",
                                    SortOrder = 4,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("c160e770-7c36-46ac-a38f-44c3434d896d"),
                                    Content = "Слова-маркеры: \r\n\r\n	This/next week (на этой/следующей неделе)\r\n	Tonight (вечером)\r\n	Today (сегодня)\r\n	Tomorrow (завтра)\r\n	This/next year (в этом/следующем году)\r\n	This/next weekend (в эти/следующие выходные).",
                                    SortOrder = 5,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("22cc46e7-20c5-4b80-b73c-f61769a9e0f8"),
                                    Content = "Например: \r\n	I am meeting with Daniel tomorrow. \r\n	Здесь в этом предложении соответсвенно показано, что встреча запланирована!",
                                    SortOrder = 6,
                                    Type = 0,
                                    UnitId = 4L
                                },
                                new
                                {
                                    Id = new Guid("88c0ea7c-32ff-40ed-839e-0f7e3b16ae3f"),
                                    Content = "My Family",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 5L
                                },
                                new
                                {
                                    Id = new Guid("0718f39b-125b-4bbe-96d2-362ac1a9f272"),
                                    Content = "b-WOj931zSU",
                                    SortOrder = 2,
                                    Type = 1,
                                    UnitId = 5L
                                },
                                new
                                {
                                    Id = new Guid("f723b9c3-5eac-4aa8-8458-f2b6fe27a2b0"),
                                    Content = "My Family - Learning English Speaking",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 6L
                                },
                                new
                                {
                                    Id = new Guid("5a5b0abe-f106-494c-a279-e0249578e74d"),
                                    Content = "kZhCip4wCKM",
                                    SortOrder = 2,
                                    Type = 1,
                                    UnitId = 6L
                                },
                                new
                                {
                                    Id = new Guid("357da888-2f29-4e4a-bb31-aec88bd0fac1"),
                                    Content = "My Family - English Vocabulary Lesson",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitId = 7L
                                },
                                new
                                {
                                    Id = new Guid("f915ddb7-e335-441d-ad60-f5ad649197cc"),
                                    Content = "uVYP8U2I8NA",
                                    SortOrder = 2,
                                    Type = 1,
                                    UnitId = 7L
                                });
                        });

                    b.Navigation("Lesson");

                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.UnitTask", b =>
                {
                    b.HasOne("Domain.LessonBoundaryModel.Unit", "Unit")
                        .WithMany("Tasks")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.LessonBoundaryModel.UnitTaskSource", "Sources", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("character varying(4096)");

                            b1.Property<string>("Key")
                                .HasColumnType("text");

                            b1.Property<int>("SortOrder")
                                .HasColumnType("integer");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.Property<long>("UnitTaskId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .HasMaxLength(4096)
                                .HasColumnType("character varying(4096)");

                            b1.HasKey("Id");

                            b1.HasIndex("UnitTaskId");

                            b1.ToTable("UnitTaskSource", "application");

                            b1.WithOwner()
                                .HasForeignKey("UnitTaskId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("39732ac8-44cf-4e9d-a77a-7e9c7f5ac48f"),
                                    Content = "I * at school.",
                                    Key = "*",
                                    SortOrder = 1,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "am"
                                },
                                new
                                {
                                    Id = new Guid("72799524-bd0c-46ec-badd-5a57fa633327"),
                                    Content = "You * beautiful.",
                                    Key = "*",
                                    SortOrder = 2,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "are"
                                },
                                new
                                {
                                    Id = new Guid("3a5b8cba-e95f-4b4f-a6d0-e5ab491d796b"),
                                    Content = "We * in the office.",
                                    Key = "*",
                                    SortOrder = 3,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "are"
                                },
                                new
                                {
                                    Id = new Guid("0e0584d5-275c-4d2a-93ca-96e9f86a8126"),
                                    Content = "They * at work.",
                                    Key = "*",
                                    SortOrder = 4,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "are"
                                },
                                new
                                {
                                    Id = new Guid("4b7ca567-febd-4916-b7c5-5fb2cbca3f3b"),
                                    Content = "He * early.",
                                    Key = "*",
                                    SortOrder = 5,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "is"
                                },
                                new
                                {
                                    Id = new Guid("38344196-e30f-430f-9516-4522542b342a"),
                                    Content = "She * late for work.",
                                    Key = "*",
                                    SortOrder = 6,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "is"
                                },
                                new
                                {
                                    Id = new Guid("942b66e9-893e-4efe-9629-5f4fd13c9481"),
                                    Content = "You * Kazakh.",
                                    Key = "*",
                                    SortOrder = 7,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "are"
                                },
                                new
                                {
                                    Id = new Guid("6b51537c-ebee-45c6-8369-a8b3b0e0e920"),
                                    Content = "We * in Kazakhstan ",
                                    Key = "*",
                                    SortOrder = 8,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "are"
                                },
                                new
                                {
                                    Id = new Guid("ab2a43e7-fa47-4956-90db-8b68fdc39933"),
                                    Content = "My name * Yernur.",
                                    Key = "*",
                                    SortOrder = 9,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "is"
                                },
                                new
                                {
                                    Id = new Guid("c7887c71-eb34-4340-96ad-adf9b532ca16"),
                                    Content = "It * my school. ",
                                    Key = "*",
                                    SortOrder = 10,
                                    Type = 0,
                                    UnitTaskId = 1L,
                                    Value = "is"
                                },
                                new
                                {
                                    Id = new Guid("44328dd9-f81a-4318-a558-552ac63082c9"),
                                    Content = "I am British",
                                    SortOrder = 1,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "I am not British"
                                },
                                new
                                {
                                    Id = new Guid("7cec4f8c-47df-4d05-b9c2-863e24a426f9"),
                                    Content = "You are Russian",
                                    SortOrder = 2,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "You are not Russian"
                                },
                                new
                                {
                                    Id = new Guid("e4944504-eb23-463d-9594-404ec64e3e83"),
                                    Content = "They are in the office",
                                    SortOrder = 3,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "They are not in the office"
                                },
                                new
                                {
                                    Id = new Guid("7caddc31-49eb-4caa-83ce-bc3466d34ca7"),
                                    Content = "He is from Turkey",
                                    SortOrder = 4,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "He is not from Turkey"
                                },
                                new
                                {
                                    Id = new Guid("08890b74-4a0e-417f-a606-3342cd04769a"),
                                    Content = "We are from Egypt",
                                    SortOrder = 5,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "We are not from Egypt"
                                },
                                new
                                {
                                    Id = new Guid("784b5e0d-b852-4a0f-8415-008ffb7a631e"),
                                    Content = "She is in America",
                                    SortOrder = 6,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "She is not in America"
                                },
                                new
                                {
                                    Id = new Guid("68df48c7-537f-4283-8e42-cb85f40feb44"),
                                    Content = "It is from China",
                                    SortOrder = 7,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "It is not from China"
                                },
                                new
                                {
                                    Id = new Guid("8ec15ed8-c520-4bd8-a0bd-e7033d5b2bb0"),
                                    Content = "You are French",
                                    SortOrder = 8,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "You are not French"
                                },
                                new
                                {
                                    Id = new Guid("10c2bb0c-1fcd-469f-8e31-41de53118b88"),
                                    Content = "They are Brazilian",
                                    SortOrder = 9,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "They are not Brazilian"
                                },
                                new
                                {
                                    Id = new Guid("10640ec1-33d6-4f8d-b451-bf6cb080062c"),
                                    Content = "He is Kazakh",
                                    SortOrder = 10,
                                    Type = 1,
                                    UnitTaskId = 2L,
                                    Value = "He is not Kazakh"
                                });
                        });

                    b.Navigation("Sources");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.CourseBoundaryModel.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Lesson", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Level", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Domain.LessonBoundaryModel.Unit", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
